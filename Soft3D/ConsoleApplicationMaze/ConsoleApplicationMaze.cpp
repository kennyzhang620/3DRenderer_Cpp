#include <cstring>
#include <iostream>
#include <stack>
#include <vector>
#include <time.h>
#include "Backtracker.h"
#include "BMPLib.h"
#include "MatrixMxN.h"

#ifdef _WIN32
#include <conio.h>
#include <Windows.h>
#endif

#define N 4

#define M 5

using namespace std;


class Transform {
public:
	float xPos = 0;
	float yPos = 0;
	float zPos = 0;
	float xRot = 0;
	float yRot = 0;
	float zRot = 0;
	float xScale = 1;
	float yScale = 1;
	float zScale = 1;
};


class Triangle {
public:
	VectorCoords v1;
	VectorCoords v2;
	VectorCoords v3;
	VectorCoords(*FragShader)(const float[], const float[]) = nullptr;
	float* fparms = nullptr; // Float array of parameters (actually bc its c/c++ u can encode whatever with pointers)

	float z_index; // For z-buffering

	// stores uv coordinates for texturing (often in conjunction with r,g,b,a above)

	float ux = 0;
	float uy = 0;

	bool operator > (const Triangle& str) const
	{
		return (z_index > str.z_index);
	}

	bool operator < (const Triangle& str) const
	{
		return (z_index < str.z_index);
	}
	
	Triangle(VectorCoords x, VectorCoords y, VectorCoords z) {
		v1 = x;
		v2 = y;
		v3 = z;
		FragShader = nullptr;
		z_index = max(v1.z, v2.z);
		z_index = max(z_index, v3.z);
	}

	Triangle(VectorCoords x, VectorCoords y, VectorCoords z, VectorCoords(*f1)(const float[], const float[])) {
		v1 = x;
		v2 = y;
		v3 = z;
		FragShader = f1;

		z_index = max(v1.z, v2.z);
		z_index = max(z_index, v3.z);
	}

	Triangle(VectorCoords x, VectorCoords y, VectorCoords z, float uvx, float uvy, VectorCoords(*f1)(const float[], const float[])) {
		v1 = x;
		v2 = y;
		v3 = z;
		ux = uvx;
		uy = uvy;
		FragShader = f1;

		z_index = max(v1.z, v2.z);
		z_index = max(z_index, v3.z);
	}

	Triangle(VectorCoords x, VectorCoords y, VectorCoords z, VectorCoords(*f1)(const float[], const float[]), float* addparms) {
		v1 = x;
		v2 = y;
		v3 = z;
		FragShader = f1;
		fparms = addparms;

		z_index = max(v1.z, v2.z);
		z_index = max(z_index, v3.z);
	}

	Triangle(VectorCoords x, VectorCoords y, VectorCoords z, float uvx, float uvy, VectorCoords(*f1)(const float[], const float[]), float* addparms) {
		v1 = x;
		v2 = y;
		v3 = z;
		ux = uvx;
		uy = uvy;
		FragShader = f1;
		fparms = addparms;

		z_index = max(v1.z, v2.z);
		z_index = max(z_index, v3.z);
	}


};

class Mesh {
public:
	vector<Triangle> MeshCoords;
	vector<VectorCoords>  Normals;
	vector<VectorCoords> UVCoords;

	Mesh(vector<float> pos, vector<float> norms, vector<float> uvs) {
	//	cout << pos.size()/9 << "SS\n";
		for (int i = 0; i < pos.size(); i += 9) {

			VectorCoords tvs = VectorCoords(pos[i], pos[i + 1], pos[i + 2], 1, pos[i], pos[i + 1], pos[i + 2], 1);
			tvs.nx = norms[i];
			tvs.ny = norms[i + 1];
			tvs.nz = norms[i + 2];
			tvs.nw = 1;
			VectorCoords tvs1 = VectorCoords(pos[i + 3], pos[i + 4], pos[i + 5], 1, pos[i + 3], pos[i + 4], pos[i + 5], 1);
			tvs1.nx = norms[i+3];
			tvs1.ny = norms[i + 4];
			tvs1.nz = norms[i + 5];
			tvs1.nw = 1;
			VectorCoords tvs2 = VectorCoords(pos[i + 6], pos[i + 7], pos[i + 8], 1, pos[i + 6], pos[i + 7], pos[i + 8], 1);
			tvs2.nx = norms[i+6];
			tvs2.ny = norms[i + 7];
			tvs2.nz = norms[i + 8];
			tvs2.nw = 1;

			MeshCoords.push_back(Triangle(tvs, tvs1,tvs2));
		}
		
		for (int i = 0; i < uvs.size() / 3; i++) {
			UVCoords.push_back(VectorCoords(uvs[i], uvs[i + 1], uvs[i + 2]));
		}
	}

};

bool Tri_Comp(Triangle t, vector<Triangle> ts) {
	for (int i = 0; i < ts.size(); i++) {
		if (ts[i].v1.x == t.v1.x && ts[i].v1.y == t.v1.y
			&& ts[i].v2.x == t.v2.x && ts[i].v2.y == t.v2.y
			&& ts[i].v3.x == t.v3.x && ts[i].v3.y == t.v3.y) {
			return true;
		}
	}

	return false;
}

VectorCoords FragShader_BS(const float vectors[], const float parms[]) {

	return VectorCoords((vectors[0] + 1)/2.0f, (vectors[1] + 1)/2.0f, (vectors[2] + 1)/2.0f);
}

VectorCoords FragShader_White(const float vectors[], const float parms[]) {
	return VectorCoords(1,1,1);
}

// Takes triangle strip and function pointer to FragShader and rasterize.
void Rasterizer(vector<Triangle>& tris) {

	BMPLib renderer;
	renderer.setCanvas(854, 480);
	
	// Sort by z-index and rasterize by distance.
	std::sort(tris.begin(),tris.end(), less<Triangle>());
	while (tris.size() > 0) {
		int maxS = tris.size() - 1;
		renderer.RenderTris(tris[maxS].v1, tris[maxS].v2, tris[maxS].v3, tris[maxS].FragShader,tris[maxS].fparms);
		tris.pop_back();
	}

	renderer.displayImage(854, 480);
	renderer.deleteImage();

}

// Vertex shader
void ProjectMesh(Mesh mesh, Transform trans, vector<Triangle>& triangleCollection, VectorCoords(*FragShader)(const float[], const float[]), float* parms=nullptr) {
	// Converts model space to world space coordinates (applys model transforms and projects to world)
	// Assign each triangle its associated fragment (pixel) shader.
	MatrixMxN<float> scale(4, 4);
	MatrixMxN<float> rot(4, 4);
	scale.Scale3D(trans.xScale, trans.yScale, trans.zScale);
	scale.res_to_matrix();
	rot.RotateZ(trans.zRot);
	rot.res_to_matrix();
	scale.matmul(rot);
	scale.res_to_matrix();
	rot.RotateY(trans.yRot);
	rot.res_to_matrix();
	scale.matmul(rot);
	scale.res_to_matrix();
	rot.RotateX(trans.xRot);
	rot.res_to_matrix();
	scale.matmul(rot);
	scale.res_to_matrix();


	rot.Translate3D(trans.xPos, trans.yPos, trans.zPos);
	rot.res_to_matrix();
	rot.matmul(scale);
	rot.res_to_matrix();
	
	for (int i = 0; i <mesh.MeshCoords.size(); i++) {
		VectorCoords v1n = rot.matmul_vtr(mesh.MeshCoords[i].v1);
		VectorCoords v2n = rot.matmul_vtr(mesh.MeshCoords[i].v2);
		VectorCoords v3n = rot.matmul_vtr(mesh.MeshCoords[i].v3);

		Triangle worldTris(v1n, v2n, v3n, FragShader, parms);

		triangleCollection.push_back(worldTris);

	}

}

void Demo_2D() {
	BMPLib img;

	bitmap_image dvd("dvd.bmp");
	bitmap_image disc("disc.bmp");

	img.loadImageBuffer(dvd);

	img.setCanvas(854, 480);

	float theta = 0.0f;
	float prevT = 0.0f;

	float diagonal = 150;

	MatrixMxN<float> transform(4, 4);
	MatrixMxN<float> rotation(4, 4);
	MatrixMxN<float> id(4, 4);
	bool Mode = 0;
	cout << "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n";

	MatrixMxN<int> A(3, 3);
	MatrixMxN<int> B(3, 3);
	A.randomize();
	B.randomize();
	MatrixMxN<int> C(3, 1);

	C.randomize();

	float x = 0;
	float y = 0;

	float prevX = 0;
	float prevY = 0;

	float xM = 400;
	float yM = 400;
	int state = 0;

	for (; ;) {
		// Standard matrix with basis = (1,0), (0,1)
		img.loadImageBuffer(dvd);

		if (x > xM && y > yM && state == 0)
			state = 1;

		if (x < 0 && y < 0 && state == 1)
			state = 0;

		if (state == 0) {
			prevX = x;
			prevY = y;
			x++;
			y++;
		}
		else {
			prevX = x;
			prevY = y;
			x--;
			y--;
		}

		prevT = theta;
		theta -= 0.5f;

		rotation.RotateZ(prevT);
		rotation.res_to_matrix();

		transform.Translate3D(prevX, prevY, 0);
		transform.res_to_matrix();
		transform.matmul(rotation);
		transform.res_to_matrix();

		//img.deleteImage();
		//img.setCanvas(854, 480);
	//	transform.Rotate(theta);
	//	transform.res_to_matrix();
		img.clearBuffer(diagonal, diagonal, transform);


		if ((int)diagonal <= 150)
			Mode = 0;

		if (diagonal > 350)
			Mode = 1;

		if (Mode == 0)
			diagonal += 1;
		else
			diagonal -= 1;

		transform.Translate3D(x, y, 0);
		transform.res_to_matrix();
		rotation.RotateZ(theta);
		rotation.res_to_matrix();

		transform.matmul(rotation);
		transform.res_to_matrix();

		img.renderImage(diagonal, diagonal, transform);

		id.Translate3D(420, 427, 0);
		id.res_to_matrix();

		img.loadImageBuffer(disc);
		img.renderImage(320, 427, id);

		img.displayImage(854, 480);
	}

}

int main() {

	//SetConsoleTitle(LPCWSTR(string("Using software D3D renderer")));
	
	//while(GameLoop());
	//Demo_2D();

	vector<float> positions = { 1, 1, -1, -1, 1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, -1, 1, 1, 1, -1, 1, -1, 1, 1, -1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, 1, -1, 1, -1, -1, -1, 1, -1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, -1, -1, 1, 1, 1, 1, -1, 1, -1, -1, -1, -1, 1, -1, 1, 1, -1, -1, -1, -1, 1, 1, -1, 1, -1, -1 }; //[-1, -1, 1, 1, -1, 1, -1, 1, 1, 1, 1, 1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 1, 1, -1, 1, -1, -1, -1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, 1, -1, -1, 1, 1, -1, -1, -1, 1, -1, -1, -1, -1, 1, 1, -1, 1, -1, 1, 1, 1, 1, 1, -1, 1, -1, 1, 1, -1]//[-1,-1,-1, -1,-1, 1, -1, 1, 1,   1, 1,-1, -1,-1,-1, -1, 1,-1,   1,-1, 1, -1,-1,-1, 1,-1,-1,   1, 1,-1, 1,-1,-1, -1,-1,-1, -1,-1,-1, -1, 1, 1, -1, 1,-1, 1,-1, 1, -1,-1, 1, -1,-1,-1, -1, 1, 1, -1,-1, 1, 1,-1, 1, 1, 1, 1, 1,-1,-1, 1, 1,-1, 1,-1,-1, 1, 1, 1, 1,-1, 1, 1, 1, 1, 1, 1,-1, -1, 1,-1, 1, 1, 1, -1, 1,-1, -1, 1, 1, 1, 1, 1, -1, 1, 1, 1,-1, 1};
    vector<float> test_pos = {0.338895, 0.188425, 0.338895, 0.338895, 0.188425, -0.338895, 0.338895, 2.777286, -0.338895, 0.338895, 0.188425, 0.338895, 0.338895, 2.777286, -0.338895, 0.338895, 2.777286, 0.338895, 1, -1, 1, 0.338895, 0.188425, 0.338895, -0.338895, 0.188425, 0.338895, 1, -1, 1, -0.338895, 0.188425, 0.338895, -1, -1, 1, -1, -1, 1, -0.338895, 0.188425, 0.338895, -0.338895, 0.188425, -0.338895, -1, -1, 1, -0.338895, 0.188425, -0.338895, -1, -1, -1, -1, -1, -1, 1, -1, -1, 0.549299, -1.583461, -0.549299, -1, -1, -1, 0.549299, -1.583461, -0.549299, -0.549299, -1.583461, -0.549299, 1, -1, -1, 0.338895, 0.188425, -0.338895, 0.338895, 0.188425, 0.338895, 1, -1, -1, 0.338895, 0.188425, 0.338895, 1, -1, 1, -1, -1, -1, -0.338895, 0.188425, -0.338895, 0.338895, 0.188425, -0.338895, -1, -1, -1, 0.338895, 0.188425, -0.338895, 1, -1, -1, -0.338895, 2.777286, -0.338895, -0.338895, 2.777286, 0.338895, -0.169716, 2.777286, 0.169716, -0.338895, 2.777286, -0.338895, -0.169716, 2.777286, 0.169716, -0.169716, 2.777286, -0.169716, 0.338895, 0.188425, -0.338895, -0.338895, 0.188425, -0.338895, -0.338895, 2.777286, -0.338895, 0.338895, 0.188425, -0.338895, -0.338895, 2.777286, -0.338895, 0.338895, 2.777286, -0.338895, -0.338895, 0.188425, 0.338895, 0.338895, 0.188425, 0.338895, 0.338895, 2.777286, 0.338895, -0.338895, 0.188425, 0.338895, 0.338895, 2.777286, 0.338895, -0.338895, 2.777286, 0.338895, -0.338895, 0.188425, -0.338895, -0.338895, 0.188425, 0.338895, -0.338895, 2.777286, 0.338895, -0.338895, 0.188425, -0.338895, -0.338895, 2.777286, 0.338895, -0.338895, 2.777286, -0.338895, 0.169716, 3.288299, -0.169716, -0.169716, 3.288299, -0.169716, -0.169716, 3.799312, -0.169716, 0.169716, 3.288299, -0.169716, -0.169716, 3.799312, -0.169716, 0.169716, 3.799312, -0.169716, -0.338895, 2.777286, 0.338895, 0.338895, 2.777286, 0.338895, 0.169716, 2.777286, 0.169716, -0.338895, 2.777286, 0.338895, 0.169716, 2.777286, 0.169716, -0.169716, 2.777286, 0.169716, 0.338895, 2.777286, -0.338895, -0.338895, 2.777286, -0.338895, -0.169716, 2.777286, -0.169716, 0.338895, 2.777286, -0.338895, -0.169716, 2.777286, -0.169716, 0.169716, 2.777286, -0.169716, 0.338895, 2.777286, 0.338895, 0.338895, 2.777286, -0.338895, 0.169716, 2.777286, -0.169716, 0.338895, 2.777286, 0.338895, 0.169716, 2.777286, -0.169716, 0.169716, 2.777286, 0.169716, 0.169716, 3.799312, 0.169716, 0.169716, 3.799312, -0.169716, 0.169716, 6.133103, -0.169716, 0.169716, 3.799312, 0.169716, 0.169716, 6.133103, -0.169716, 0.169716, 6.133103, 0.169716, 0.169716, 3.799312, -0.169716, 0.169716, 3.799312, 0.169716, 2.855141, 3.799312, 0.169716, 0.169716, 3.799312, -0.169716, 2.855141, 3.799312, 0.169716, 2.855141, 3.799312, -0.169716, -0.169716, 3.288299, -0.169716, -0.169716, 3.288299, 0.169716, -0.169716, 3.799312, 0.169716, -0.169716, 3.288299, -0.169716, -0.169716, 3.799312, 0.169716, -0.169716, 3.799312, -0.169716, -0.169716, 3.288299, 0.169716, 0.169716, 3.288299, 0.169716, 0.169716, 3.288299, 3.672321, -0.169716, 3.288299, 0.169716, 0.169716, 3.288299, 3.672321, -0.169716, 3.288299, 3.672321, -0.169716, 2.777286, 0.169716, 0.169716, 2.777286, 0.169716, 0.169716, 3.288299, 0.169716, -0.169716, 2.777286, 0.169716, 0.169716, 3.288299, 0.169716, -0.169716, 3.288299, 0.169716, -0.169716, 2.777286, -0.169716, -0.169716, 2.777286, 0.169716, -0.169716, 3.288299, 0.169716, -0.169716, 2.777286, -0.169716, -0.169716, 3.288299, 0.169716, -0.169716, 3.288299, -0.169716, 0.169716, 2.777286, 0.169716, 0.169716, 2.777286, -0.169716, 0.169716, 3.288299, -0.169716, 0.169716, 2.777286, 0.169716, 0.169716, 3.288299, -0.169716, 0.169716, 3.288299, 0.169716, 0.169716, 2.777286, -0.169716, -0.169716, 2.777286, -0.169716, -0.169716, 3.288299, -0.169716, 0.169716, 2.777286, -0.169716, -0.169716, 3.288299, -0.169716, 0.169716, 3.288299, -0.169716, 2.855141, 3.288299, 0.169716, 2.855141, 3.288299, -0.169716, 3.302497, 3.121528, -0.28049, 2.855141, 3.288299, 0.169716, 3.302497, 3.121528, -0.28049, 3.302497, 3.121528, 0.28049, 0.169716, 3.799312, 0.169716, 0.169716, 3.288299, 0.169716, 2.855141, 3.288299, 0.169716, 0.169716, 3.799312, 0.169716, 2.855141, 3.288299, 0.169716, 2.855141, 3.799312, 0.169716, 0.169716, 3.288299, -0.169716, 0.169716, 3.799312, -0.169716, 2.855141, 3.799312, -0.169716, 0.169716, 3.288299, -0.169716, 2.855141, 3.799312, -0.169716, 2.855141, 3.288299, -0.169716, 0.169716, 3.288299, 0.169716, 0.169716, 3.288299, -0.169716, 2.855141, 3.288299, -0.169716, 0.169716, 3.288299, 0.169716, 2.855141, 3.288299, -0.169716, 2.855141, 3.288299, 0.169716, 0.169716, 3.288299, 3.672321, 0.169716, 3.799312, 3.672321, 0.246526, 3.914951, 3.873332, 0.169716, 3.288299, 3.672321, 0.246526, 3.914951, 3.873332, 0.246526, 3.17266, 3.873332, 0.169716, 3.288299, 0.169716, 0.169716, 3.799312, 0.169716, 0.169716, 3.799312, 3.672321, 0.169716, 3.288299, 0.169716, 0.169716, 3.799312, 3.672321, 0.169716, 3.288299, 3.672321, 0.169716, 3.799312, 0.169716, -0.169716, 3.799312, 0.169716, -0.169716, 3.799312, 3.672321, 0.169716, 3.799312, 0.169716, -0.169716, 3.799312, 3.672321, 0.169716, 3.799312, 3.672321, -0.169716, 3.799312, 0.169716, -0.169716, 3.288299, 0.169716, -0.169716, 3.288299, 3.672321, -0.169716, 3.799312, 0.169716, -0.169716, 3.288299, 3.672321, -0.169716, 3.799312, 3.672321, -0.169716, 6.133103, -0.169716, -0.169716, 6.133103, 0.169716, -0.37321, 6.376593, 0.37321, -0.169716, 6.133103, -0.169716, -0.37321, 6.376593, 0.37321, -0.37321, 6.376593, -0.37321, -0.169716, 3.799312, -0.169716, -0.169716, 3.799312, 0.169716, -0.169716, 6.133103, 0.169716, -0.169716, 3.799312, -0.169716, -0.169716, 6.133103, 0.169716, -0.169716, 6.133103, -0.169716, -0.169716, 3.799312, 0.169716, 0.169716, 3.799312, 0.169716, 0.169716, 6.133103, 0.169716, -0.169716, 3.799312, 0.169716, 0.169716, 6.133103, 0.169716, -0.169716, 6.133103, 0.169716, 0.169716, 3.799312, -0.169716, -0.169716, 3.799312, -0.169716, -0.169716, 6.133103, -0.169716, 0.169716, 3.799312, -0.169716, -0.169716, 6.133103, -0.169716, 0.169716, 6.133103, -0.169716, 0.37321, 6.376593, -0.37321, -0.37321, 6.376593, -0.37321, -0.103801, 6.938471, -0.103801, 0.37321, 6.376593, -0.37321, -0.103801, 6.938471, -0.103801, 0.103801, 6.938471, -0.103801, -0.169716, 6.133103, 0.169716, 0.169716, 6.133103, 0.169716, 0.37321, 6.376593, 0.37321, -0.169716, 6.133103, 0.169716, 0.37321, 6.376593, 0.37321, -0.37321, 6.376593, 0.37321, 0.169716, 6.133103, -0.169716, -0.169716, 6.133103, -0.169716, -0.37321, 6.376593, -0.37321, 0.169716, 6.133103, -0.169716, -0.37321, 6.376593, -0.37321, 0.37321, 6.376593, -0.37321, 0.169716, 6.133103, 0.169716, 0.169716, 6.133103, -0.169716, 0.37321, 6.376593, -0.37321, 0.169716, 6.133103, 0.169716, 0.37321, 6.376593, -0.37321, 0.37321, 6.376593, 0.37321, 0.103801, 6.938471, -0.103801, -0.103801, 6.938471, -0.103801, -0.103801, 6.938471, 0.103801, 0.103801, 6.938471, -0.103801, -0.103801, 6.938471, 0.103801, 0.103801, 6.938471, 0.103801, 0.37321, 6.376593, 0.37321, 0.37321, 6.376593, -0.37321, 0.103801, 6.938471, -0.103801, 0.37321, 6.376593, 0.37321, 0.103801, 6.938471, -0.103801, 0.103801, 6.938471, 0.103801, -0.37321, 6.376593, -0.37321, -0.37321, 6.376593, 0.37321, -0.103801, 6.938471, 0.103801, -0.37321, 6.376593, -0.37321, -0.103801, 6.938471, 0.103801, -0.103801, 6.938471, -0.103801, -0.37321, 6.376593, 0.37321, 0.37321, 6.376593, 0.37321, 0.103801, 6.938471, 0.103801, -0.37321, 6.376593, 0.37321, 0.103801, 6.938471, 0.103801, -0.103801, 6.938471, 0.103801, 0.246526, 3.914951, 3.873332, -0.246526, 3.914951, 3.873332, -0.042408, 3.607651, 4.63741, 0.246526, 3.914951, 3.873332, -0.042408, 3.607651, 4.63741, 0.042408, 3.607651, 4.63741, 0.169716, 3.799312, 3.672321, -0.169716, 3.799312, 3.672321, -0.246526, 3.914951, 3.873332, 0.169716, 3.799312, 3.672321, -0.246526, 3.914951, 3.873332, 0.246526, 3.914951, 3.873332, -0.169716, 3.288299, 3.672321, 0.169716, 3.288299, 3.672321, 0.246526, 3.17266, 3.873332, -0.169716, 3.288299, 3.672321, 0.246526, 3.17266, 3.873332, -0.246526, 3.17266, 3.873332, -0.169716, 3.799312, 3.672321, -0.169716, 3.288299, 3.672321, -0.246526, 3.17266, 3.873332, -0.169716, 3.799312, 3.672321, -0.246526, 3.17266, 3.873332, -0.246526, 3.914951, 3.873332, -0.042408, 3.47996, 4.63741, 0.042408, 3.47996, 4.63741, 0.042408, 3.607651, 4.63741, -0.042408, 3.47996, 4.63741, 0.042408, 3.607651, 4.63741, -0.042408, 3.607651, 4.63741, -0.246526, 3.17266, 3.873332, 0.246526, 3.17266, 3.873332, 0.042408, 3.47996, 4.63741, -0.246526, 3.17266, 3.873332, 0.042408, 3.47996, 4.63741, -0.042408, 3.47996, 4.63741, -0.246526, 3.914951, 3.873332, -0.246526, 3.17266, 3.873332, -0.042408, 3.47996, 4.63741, -0.246526, 3.914951, 3.873332, -0.042408, 3.47996, 4.63741, -0.042408, 3.607651, 4.63741, 0.246526, 3.17266, 3.873332, 0.246526, 3.914951, 3.873332, 0.042408, 3.607651, 4.63741, 0.246526, 3.17266, 3.873332, 0.042408, 3.607651, 4.63741, 0.042408, 3.47996, 4.63741, 3.302497, 3.966084, 0.28049, 3.302497, 3.121528, 0.28049, 5.085871, 3.401694, 0.094395, 3.302497, 3.966084, 0.28049, 5.085871, 3.401694, 0.094395, 5.085871, 3.685917, 0.094395, 2.855141, 3.288299, -0.169716, 2.855141, 3.799312, -0.169716, 3.302497, 3.966084, -0.28049, 2.855141, 3.288299, -0.169716, 3.302497, 3.966084, -0.28049, 3.302497, 3.121528, -0.28049, 2.855141, 3.799312, 0.169716, 2.855141, 3.288299, 0.169716, 3.302497, 3.121528, 0.28049, 2.855141, 3.799312, 0.169716, 3.302497, 3.121528, 0.28049, 3.302497, 3.966084, 0.28049, 2.855141, 3.799312, -0.169716, 2.855141, 3.799312, 0.169716, 3.302497, 3.966084, 0.28049, 2.855141, 3.799312, -0.169716, 3.302497, 3.966084, 0.28049, 3.302497, 3.966084, -0.28049, 5.085871, 3.401694, 0.094395, 5.085871, 3.401694, -0.094395, 5.085871, 3.685917, -0.094395, 5.085871, 3.401694, 0.094395, 5.085871, 3.685917, -0.094395, 5.085871, 3.685917, 0.094395, 3.302497, 3.966084, -0.28049, 3.302497, 3.966084, 0.28049, 5.085871, 3.685917, 0.094395, 3.302497, 3.966084, -0.28049, 5.085871, 3.685917, 0.094395, 5.085871, 3.685917, -0.094395, 3.302497, 3.121528, 0.28049, 3.302497, 3.121528, -0.28049, 5.085871, 3.401694, -0.094395, 3.302497, 3.121528, 0.28049, 5.085871, 3.401694, -0.094395, 5.085871, 3.401694, 0.094395, 3.302497, 3.121528, -0.28049, 3.302497, 3.966084, -0.28049, 5.085871, 3.685917, -0.094395, 3.302497, 3.121528, -0.28049, 5.085871, 3.685917, -0.094395, 5.085871, 3.401694, -0.094395, -0.549299, -1.583461, -0.549299, 0.549299, -1.583461, -0.549299, 0.549299, -1.583461, 0.549299, -0.549299, -1.583461, -0.549299, 0.549299, -1.583461, 0.549299, -0.549299, -1.583461, 0.549299, 1, -1, 1, -1, -1, 1, -0.549299, -1.583461, 0.549299, 1, -1, 1, -0.549299, -1.583461, 0.549299, 0.549299, -1.583461, 0.549299, -1, -1, 1, -1, -1, -1, -0.549299, -1.583461, -0.549299, -1, -1, 1, -0.549299, -1.583461, -0.549299, -0.549299, -1.583461, 0.549299, 1, -1, -1, 1, -1, 1, 0.549299, -1.583461, 0.549299, 1, -1, -1, 0.549299, -1.583461, 0.549299, 0.549299, -1.583461, -0.549299};
	vector<float> normals = { 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1 };
	vector<float> test_norms = { 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0.4861, 0.8739, 0, 0.4861, 0.8739, 0, 0.4861, 0.8739, 0, 0.4861, 0.8739, 0, 0.4861, 0.8739, 0, 0.4861, 0.8739, -0.8739, 0.4861, 0, -0.8739, 0.4861, 0, -0.8739, 0.4861, 0, -0.8739, 0.4861, 0, -0.8739, 0.4861, 0, -0.8739, 0.4861, 0, 0, -0.6113, -0.7914, 0, -0.6113, -0.7914, 0, -0.6113, -0.7914, 0, -0.6113, -0.7914, 0, -0.6113, -0.7914, 0, -0.6113, -0.7914, 0.8739, 0.4861, 0, 0.8739, 0.4861, 0, 0.8739, 0.4861, 0, 0.8739, 0.4861, 0, 0.8739, 0.4861, 0, 0.8739, 0.4861, 0, 0, 0.4861, -0.8739, 0, 0.4861, -0.8739, 0, 0.4861, -0.8739, 0, 0.4861, -0.8739, 0, 0.4861, -0.8739, 0, 0.4861, -0.8739, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, -0.3493, -0.937, 0, -0.3493, -0.937, 0, -0.3493, -0.937, 0, -0.3493, -0.937, 0, -0.3493, -0.937, 0, -0.3493, -0.937, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0.9341, 0, -0.3569, 0.9341, 0, -0.3569, 0.9341, 0, -0.3569, 0.9341, 0, -0.3569, 0.9341, 0, -0.3569, 0.9341, 0, -0.3569, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -0.7673, -0.6413, 0, -0.7673, -0.6413, 0, -0.7673, -0.6413, 0, -0.7673, -0.6413, 0, -0.7673, -0.6413, 0, -0.7673, -0.6413, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0.4323, -0.9017, 0, 0.4323, -0.9017, 0, 0.4323, -0.9017, 0, 0.4323, -0.9017, 0, 0.4323, -0.9017, 0, 0.4323, -0.9017, 0, -0.6413, 0.7673, 0, -0.6413, 0.7673, 0, -0.6413, 0.7673, 0, -0.6413, 0.7673, 0, -0.6413, 0.7673, 0, -0.6413, 0.7673, 0, -0.6413, -0.7673, 0, -0.6413, -0.7673, 0, -0.6413, -0.7673, 0, -0.6413, -0.7673, 0, -0.6413, -0.7673, 0, -0.6413, -0.7673, 0.7673, -0.6413, 0, 0.7673, -0.6413, 0, 0.7673, -0.6413, 0, 0.7673, -0.6413, 0, 0.7673, -0.6413, 0, 0.7673, -0.6413, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0.9017, 0.4323, 0, 0.9017, 0.4323, 0, 0.9017, 0.4323, 0, 0.9017, 0.4323, 0, 0.9017, 0.4323, 0, 0.9017, 0.4323, 0, -0.9017, 0.4323, 0, -0.9017, 0.4323, 0, -0.9017, 0.4323, 0, -0.9017, 0.4323, 0, -0.9017, 0.4323, 0, -0.9017, 0.4323, 0, 0, 0.4323, 0.9017, 0, 0.4323, 0.9017, 0, 0.4323, 0.9017, 0, 0.4323, 0.9017, 0, 0.4323, 0.9017, 0, 0.4323, 0.9017, 0, 0.9278, 0.3731, 0, 0.9278, 0.3731, 0, 0.9278, 0.3731, 0, 0.9278, 0.3731, 0, 0.9278, 0.3731, 0, 0.9278, 0.3731, 0, 0.8668, -0.4987, 0, 0.8668, -0.4987, 0, 0.8668, -0.4987, 0, 0.8668, -0.4987, 0, 0.8668, -0.4987, 0, 0.8668, -0.4987, 0, -0.8668, -0.4987, 0, -0.8668, -0.4987, 0, -0.8668, -0.4987, 0, -0.8668, -0.4987, 0, -0.8668, -0.4987, 0, -0.8668, -0.4987, -0.9341, 0, -0.3569, -0.9341, 0, -0.3569, -0.9341, 0, -0.3569, -0.9341, 0, -0.3569, -0.9341, 0, -0.3569, -0.9341, 0, -0.3569, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, -0.9278, 0.3731, 0, -0.9278, 0.3731, 0, -0.9278, 0.3731, 0, -0.9278, 0.3731, 0, -0.9278, 0.3731, 0, -0.9278, 0.3731, -0.9661, 0, 0.2581, -0.9661, 0, 0.2581, -0.9661, 0, 0.2581, -0.9661, 0, 0.2581, -0.9661, 0, 0.2581, -0.9661, 0, 0.2581, 0.9661, 0, 0.2581, 0.9661, 0, 0.2581, 0.9661, 0, 0.2581, 0.9661, 0, 0.2581, 0.9661, 0, 0.2581, 0.9661, 0, 0.2581, 0.1038, 0, 0.9946, 0.1038, 0, 0.9946, 0.1038, 0, 0.9946, 0.1038, 0, 0.9946, 0.1038, 0, 0.9946, 0.1038, 0, 0.9946, -0.2404, 0, -0.9707, -0.2404, 0, -0.9707, -0.2404, 0, -0.9707, -0.2404, 0, -0.9707, -0.2404, 0, -0.9707, -0.2404, 0, -0.9707, -0.2404, 0, 0.9707, -0.2404, 0, 0.9707, -0.2404, 0, 0.9707, -0.2404, 0, 0.9707, -0.2404, 0, 0.9707, -0.2404, 0, 0.9707, -0.3493, 0.937, 0, -0.3493, 0.937, 0, -0.3493, 0.937, 0, -0.3493, 0.937, 0, -0.3493, 0.937, 0, -0.3493, 0.937, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0.1552, 0.9879, 0, 0.1552, 0.9879, 0, 0.1552, 0.9879, 0, 0.1552, 0.9879, 0, 0.1552, 0.9879, 0, 0.1552, 0.9879, 0, 0.1552, -0.9879, 0, 0.1552, -0.9879, 0, 0.1552, -0.9879, 0, 0.1552, -0.9879, 0, 0.1552, -0.9879, 0, 0.1552, -0.9879, 0, 0.1038, 0, -0.9946, 0.1038, 0, -0.9946, 0.1038, 0, -0.9946, 0.1038, 0, -0.9946, 0.1038, 0, -0.9946, 0.1038, 0, -0.9946, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -0.6113, 0.7914, 0, -0.6113, 0.7914, 0, -0.6113, 0.7914, 0, -0.6113, 0.7914, 0, -0.6113, 0.7914, 0, -0.6113, 0.7914, -0.7914, -0.6113, 0, -0.7914, -0.6113, 0, -0.7914, -0.6113, 0, -0.7914, -0.6113, 0, -0.7914, -0.6113, 0, -0.7914, -0.6113, 0, 0.7914, -0.6113, 0, 0.7914, -0.6113, 0, 0.7914, -0.6113, 0, 0.7914, -0.6113, 0, 0.7914, -0.6113, 0, 0.7914, -0.6113, 0 };
	vector<float> uvCoords = {};
	vector<float> uv_test = {};

	time_t t = time(NULL);
	
	Mesh m(test_pos, test_norms, uvCoords);
	Mesh m2(positions, normals, uvCoords);
	Transform tf;
	tf.xScale = 50;
	tf.yScale = 50;
	tf.zScale = 50;
	tf.xPos = 300;
	tf.yPos = 300;
	tf.zPos = 0;

	Transform tf2;
	tf2.xScale = 30;
	tf2.yScale = 30;
	tf2.zScale = 30;
	tf2.xPos = 100;
	tf2.yPos = 300;
	tf2.zPos = 0;

	int frames = 0;
	int tframe = 0;
	int cfps = 0;
	vector<Triangle> tris;

	while(true) {
		tf.yRot -= 1;
		tf.xRot -= 1;
		tf2.zRot++;
		tf2.xRot++;
		ProjectMesh(m, tf,tris, FragShader_BS);
		ProjectMesh(m2, tf2, tris, FragShader_BS);
		Rasterizer(tris);

		string s = " " + std::to_string(cfps) + " FPS" + " Frames rendered: " + std::to_string(frames++);
		tframe++;
		wstring r = std::wstring(s.begin(), s.end());
		LPCWSTR wideString = r.c_str();
		SetConsoleTitle(wideString);

		time_t c = time(NULL) - t;
		if (c >= 1) {
			t = time(NULL);
			cfps = tframe;
			tframe = 0;
		}
	}

	/*
	float x[] = {1,2,3.4};
	const char* tester = "sus";
	char* a = (char*)x;
	memcpy(x, tester, 4);

	cout << a << " " << x[1] << " " << x[2] <<'\n';
	*/
	return 0;
}