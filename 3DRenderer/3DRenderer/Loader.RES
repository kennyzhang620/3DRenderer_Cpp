#pragma once
/*
void Rasterize_ST() {
	//SetConsoleTitle(LPCWSTR(string("Using software D3D renderer")));

	//while(GameLoop());
	//Demo_2D();

	float nPlane = 0.01f;
	float fPlane = 1000;

	vector<float> positions = { 1, 1, -1, -1, 1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, -1, 1, 1, 1, -1, 1, -1, 1, 1, -1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, 1, -1, 1, -1, -1, -1, 1, -1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, -1, -1, 1, 1, 1, 1, -1, 1, -1, -1, -1, -1, 1, -1, 1, 1, -1, -1, -1, -1, 1, 1, -1, 1, -1, -1 }; //[-1, -1, 1, 1, -1, 1, -1, 1, 1, 1, 1, 1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 1, 1, -1, 1, -1, -1, -1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, 1, -1, -1, 1, 1, -1, -1, -1, 1, -1, -1, -1, -1, 1, 1, -1, 1, -1, 1, 1, 1, 1, 1, -1, 1, -1, 1, 1, -1]//[-1,-1,-1, -1,-1, 1, -1, 1, 1,   1, 1,-1, -1,-1,-1, -1, 1,-1,   1,-1, 1, -1,-1,-1, 1,-1,-1,   1, 1,-1, 1,-1,-1, -1,-1,-1, -1,-1,-1, -1, 1, 1, -1, 1,-1, 1,-1, 1, -1,-1, 1, -1,-1,-1, -1, 1, 1, -1,-1, 1, 1,-1, 1, 1, 1, 1, 1,-1,-1, 1, 1,-1, 1,-1,-1, 1, 1, 1, 1,-1, 1, 1, 1, 1, 1, 1,-1, -1, 1,-1, 1, 1, 1, -1, 1,-1, -1, 1, 1, 1, 1, 1, -1, 1, 1, 1,-1, 1};
	vector<float> test_pos = { 0.338895, 0.188425, 0.338895, 0.338895, 0.188425, -0.338895, 0.338895, 2.777286, -0.338895, 0.338895, 0.188425, 0.338895, 0.338895, 2.777286, -0.338895, 0.338895, 2.777286, 0.338895, 1, -1, 1, 0.338895, 0.188425, 0.338895, -0.338895, 0.188425, 0.338895, 1, -1, 1, -0.338895, 0.188425, 0.338895, -1, -1, 1, -1, -1, 1, -0.338895, 0.188425, 0.338895, -0.338895, 0.188425, -0.338895, -1, -1, 1, -0.338895, 0.188425, -0.338895, -1, -1, -1, -1, -1, -1, 1, -1, -1, 0.549299, -1.583461, -0.549299, -1, -1, -1, 0.549299, -1.583461, -0.549299, -0.549299, -1.583461, -0.549299, 1, -1, -1, 0.338895, 0.188425, -0.338895, 0.338895, 0.188425, 0.338895, 1, -1, -1, 0.338895, 0.188425, 0.338895, 1, -1, 1, -1, -1, -1, -0.338895, 0.188425, -0.338895, 0.338895, 0.188425, -0.338895, -1, -1, -1, 0.338895, 0.188425, -0.338895, 1, -1, -1, -0.338895, 2.777286, -0.338895, -0.338895, 2.777286, 0.338895, -0.169716, 2.777286, 0.169716, -0.338895, 2.777286, -0.338895, -0.169716, 2.777286, 0.169716, -0.169716, 2.777286, -0.169716, 0.338895, 0.188425, -0.338895, -0.338895, 0.188425, -0.338895, -0.338895, 2.777286, -0.338895, 0.338895, 0.188425, -0.338895, -0.338895, 2.777286, -0.338895, 0.338895, 2.777286, -0.338895, -0.338895, 0.188425, 0.338895, 0.338895, 0.188425, 0.338895, 0.338895, 2.777286, 0.338895, -0.338895, 0.188425, 0.338895, 0.338895, 2.777286, 0.338895, -0.338895, 2.777286, 0.338895, -0.338895, 0.188425, -0.338895, -0.338895, 0.188425, 0.338895, -0.338895, 2.777286, 0.338895, -0.338895, 0.188425, -0.338895, -0.338895, 2.777286, 0.338895, -0.338895, 2.777286, -0.338895, 0.169716, 3.288299, -0.169716, -0.169716, 3.288299, -0.169716, -0.169716, 3.799312, -0.169716, 0.169716, 3.288299, -0.169716, -0.169716, 3.799312, -0.169716, 0.169716, 3.799312, -0.169716, -0.338895, 2.777286, 0.338895, 0.338895, 2.777286, 0.338895, 0.169716, 2.777286, 0.169716, -0.338895, 2.777286, 0.338895, 0.169716, 2.777286, 0.169716, -0.169716, 2.777286, 0.169716, 0.338895, 2.777286, -0.338895, -0.338895, 2.777286, -0.338895, -0.169716, 2.777286, -0.169716, 0.338895, 2.777286, -0.338895, -0.169716, 2.777286, -0.169716, 0.169716, 2.777286, -0.169716, 0.338895, 2.777286, 0.338895, 0.338895, 2.777286, -0.338895, 0.169716, 2.777286, -0.169716, 0.338895, 2.777286, 0.338895, 0.169716, 2.777286, -0.169716, 0.169716, 2.777286, 0.169716, 0.169716, 3.799312, 0.169716, 0.169716, 3.799312, -0.169716, 0.169716, 6.133103, -0.169716, 0.169716, 3.799312, 0.169716, 0.169716, 6.133103, -0.169716, 0.169716, 6.133103, 0.169716, 0.169716, 3.799312, -0.169716, 0.169716, 3.799312, 0.169716, 2.855141, 3.799312, 0.169716, 0.169716, 3.799312, -0.169716, 2.855141, 3.799312, 0.169716, 2.855141, 3.799312, -0.169716, -0.169716, 3.288299, -0.169716, -0.169716, 3.288299, 0.169716, -0.169716, 3.799312, 0.169716, -0.169716, 3.288299, -0.169716, -0.169716, 3.799312, 0.169716, -0.169716, 3.799312, -0.169716, -0.169716, 3.288299, 0.169716, 0.169716, 3.288299, 0.169716, 0.169716, 3.288299, 3.672321, -0.169716, 3.288299, 0.169716, 0.169716, 3.288299, 3.672321, -0.169716, 3.288299, 3.672321, -0.169716, 2.777286, 0.169716, 0.169716, 2.777286, 0.169716, 0.169716, 3.288299, 0.169716, -0.169716, 2.777286, 0.169716, 0.169716, 3.288299, 0.169716, -0.169716, 3.288299, 0.169716, -0.169716, 2.777286, -0.169716, -0.169716, 2.777286, 0.169716, -0.169716, 3.288299, 0.169716, -0.169716, 2.777286, -0.169716, -0.169716, 3.288299, 0.169716, -0.169716, 3.288299, -0.169716, 0.169716, 2.777286, 0.169716, 0.169716, 2.777286, -0.169716, 0.169716, 3.288299, -0.169716, 0.169716, 2.777286, 0.169716, 0.169716, 3.288299, -0.169716, 0.169716, 3.288299, 0.169716, 0.169716, 2.777286, -0.169716, -0.169716, 2.777286, -0.169716, -0.169716, 3.288299, -0.169716, 0.169716, 2.777286, -0.169716, -0.169716, 3.288299, -0.169716, 0.169716, 3.288299, -0.169716, 2.855141, 3.288299, 0.169716, 2.855141, 3.288299, -0.169716, 3.302497, 3.121528, -0.28049, 2.855141, 3.288299, 0.169716, 3.302497, 3.121528, -0.28049, 3.302497, 3.121528, 0.28049, 0.169716, 3.799312, 0.169716, 0.169716, 3.288299, 0.169716, 2.855141, 3.288299, 0.169716, 0.169716, 3.799312, 0.169716, 2.855141, 3.288299, 0.169716, 2.855141, 3.799312, 0.169716, 0.169716, 3.288299, -0.169716, 0.169716, 3.799312, -0.169716, 2.855141, 3.799312, -0.169716, 0.169716, 3.288299, -0.169716, 2.855141, 3.799312, -0.169716, 2.855141, 3.288299, -0.169716, 0.169716, 3.288299, 0.169716, 0.169716, 3.288299, -0.169716, 2.855141, 3.288299, -0.169716, 0.169716, 3.288299, 0.169716, 2.855141, 3.288299, -0.169716, 2.855141, 3.288299, 0.169716, 0.169716, 3.288299, 3.672321, 0.169716, 3.799312, 3.672321, 0.246526, 3.914951, 3.873332, 0.169716, 3.288299, 3.672321, 0.246526, 3.914951, 3.873332, 0.246526, 3.17266, 3.873332, 0.169716, 3.288299, 0.169716, 0.169716, 3.799312, 0.169716, 0.169716, 3.799312, 3.672321, 0.169716, 3.288299, 0.169716, 0.169716, 3.799312, 3.672321, 0.169716, 3.288299, 3.672321, 0.169716, 3.799312, 0.169716, -0.169716, 3.799312, 0.169716, -0.169716, 3.799312, 3.672321, 0.169716, 3.799312, 0.169716, -0.169716, 3.799312, 3.672321, 0.169716, 3.799312, 3.672321, -0.169716, 3.799312, 0.169716, -0.169716, 3.288299, 0.169716, -0.169716, 3.288299, 3.672321, -0.169716, 3.799312, 0.169716, -0.169716, 3.288299, 3.672321, -0.169716, 3.799312, 3.672321, -0.169716, 6.133103, -0.169716, -0.169716, 6.133103, 0.169716, -0.37321, 6.376593, 0.37321, -0.169716, 6.133103, -0.169716, -0.37321, 6.376593, 0.37321, -0.37321, 6.376593, -0.37321, -0.169716, 3.799312, -0.169716, -0.169716, 3.799312, 0.169716, -0.169716, 6.133103, 0.169716, -0.169716, 3.799312, -0.169716, -0.169716, 6.133103, 0.169716, -0.169716, 6.133103, -0.169716, -0.169716, 3.799312, 0.169716, 0.169716, 3.799312, 0.169716, 0.169716, 6.133103, 0.169716, -0.169716, 3.799312, 0.169716, 0.169716, 6.133103, 0.169716, -0.169716, 6.133103, 0.169716, 0.169716, 3.799312, -0.169716, -0.169716, 3.799312, -0.169716, -0.169716, 6.133103, -0.169716, 0.169716, 3.799312, -0.169716, -0.169716, 6.133103, -0.169716, 0.169716, 6.133103, -0.169716, 0.37321, 6.376593, -0.37321, -0.37321, 6.376593, -0.37321, -0.103801, 6.938471, -0.103801, 0.37321, 6.376593, -0.37321, -0.103801, 6.938471, -0.103801, 0.103801, 6.938471, -0.103801, -0.169716, 6.133103, 0.169716, 0.169716, 6.133103, 0.169716, 0.37321, 6.376593, 0.37321, -0.169716, 6.133103, 0.169716, 0.37321, 6.376593, 0.37321, -0.37321, 6.376593, 0.37321, 0.169716, 6.133103, -0.169716, -0.169716, 6.133103, -0.169716, -0.37321, 6.376593, -0.37321, 0.169716, 6.133103, -0.169716, -0.37321, 6.376593, -0.37321, 0.37321, 6.376593, -0.37321, 0.169716, 6.133103, 0.169716, 0.169716, 6.133103, -0.169716, 0.37321, 6.376593, -0.37321, 0.169716, 6.133103, 0.169716, 0.37321, 6.376593, -0.37321, 0.37321, 6.376593, 0.37321, 0.103801, 6.938471, -0.103801, -0.103801, 6.938471, -0.103801, -0.103801, 6.938471, 0.103801, 0.103801, 6.938471, -0.103801, -0.103801, 6.938471, 0.103801, 0.103801, 6.938471, 0.103801, 0.37321, 6.376593, 0.37321, 0.37321, 6.376593, -0.37321, 0.103801, 6.938471, -0.103801, 0.37321, 6.376593, 0.37321, 0.103801, 6.938471, -0.103801, 0.103801, 6.938471, 0.103801, -0.37321, 6.376593, -0.37321, -0.37321, 6.376593, 0.37321, -0.103801, 6.938471, 0.103801, -0.37321, 6.376593, -0.37321, -0.103801, 6.938471, 0.103801, -0.103801, 6.938471, -0.103801, -0.37321, 6.376593, 0.37321, 0.37321, 6.376593, 0.37321, 0.103801, 6.938471, 0.103801, -0.37321, 6.376593, 0.37321, 0.103801, 6.938471, 0.103801, -0.103801, 6.938471, 0.103801, 0.246526, 3.914951, 3.873332, -0.246526, 3.914951, 3.873332, -0.042408, 3.607651, 4.63741, 0.246526, 3.914951, 3.873332, -0.042408, 3.607651, 4.63741, 0.042408, 3.607651, 4.63741, 0.169716, 3.799312, 3.672321, -0.169716, 3.799312, 3.672321, -0.246526, 3.914951, 3.873332, 0.169716, 3.799312, 3.672321, -0.246526, 3.914951, 3.873332, 0.246526, 3.914951, 3.873332, -0.169716, 3.288299, 3.672321, 0.169716, 3.288299, 3.672321, 0.246526, 3.17266, 3.873332, -0.169716, 3.288299, 3.672321, 0.246526, 3.17266, 3.873332, -0.246526, 3.17266, 3.873332, -0.169716, 3.799312, 3.672321, -0.169716, 3.288299, 3.672321, -0.246526, 3.17266, 3.873332, -0.169716, 3.799312, 3.672321, -0.246526, 3.17266, 3.873332, -0.246526, 3.914951, 3.873332, -0.042408, 3.47996, 4.63741, 0.042408, 3.47996, 4.63741, 0.042408, 3.607651, 4.63741, -0.042408, 3.47996, 4.63741, 0.042408, 3.607651, 4.63741, -0.042408, 3.607651, 4.63741, -0.246526, 3.17266, 3.873332, 0.246526, 3.17266, 3.873332, 0.042408, 3.47996, 4.63741, -0.246526, 3.17266, 3.873332, 0.042408, 3.47996, 4.63741, -0.042408, 3.47996, 4.63741, -0.246526, 3.914951, 3.873332, -0.246526, 3.17266, 3.873332, -0.042408, 3.47996, 4.63741, -0.246526, 3.914951, 3.873332, -0.042408, 3.47996, 4.63741, -0.042408, 3.607651, 4.63741, 0.246526, 3.17266, 3.873332, 0.246526, 3.914951, 3.873332, 0.042408, 3.607651, 4.63741, 0.246526, 3.17266, 3.873332, 0.042408, 3.607651, 4.63741, 0.042408, 3.47996, 4.63741, 3.302497, 3.966084, 0.28049, 3.302497, 3.121528, 0.28049, 5.085871, 3.401694, 0.094395, 3.302497, 3.966084, 0.28049, 5.085871, 3.401694, 0.094395, 5.085871, 3.685917, 0.094395, 2.855141, 3.288299, -0.169716, 2.855141, 3.799312, -0.169716, 3.302497, 3.966084, -0.28049, 2.855141, 3.288299, -0.169716, 3.302497, 3.966084, -0.28049, 3.302497, 3.121528, -0.28049, 2.855141, 3.799312, 0.169716, 2.855141, 3.288299, 0.169716, 3.302497, 3.121528, 0.28049, 2.855141, 3.799312, 0.169716, 3.302497, 3.121528, 0.28049, 3.302497, 3.966084, 0.28049, 2.855141, 3.799312, -0.169716, 2.855141, 3.799312, 0.169716, 3.302497, 3.966084, 0.28049, 2.855141, 3.799312, -0.169716, 3.302497, 3.966084, 0.28049, 3.302497, 3.966084, -0.28049, 5.085871, 3.401694, 0.094395, 5.085871, 3.401694, -0.094395, 5.085871, 3.685917, -0.094395, 5.085871, 3.401694, 0.094395, 5.085871, 3.685917, -0.094395, 5.085871, 3.685917, 0.094395, 3.302497, 3.966084, -0.28049, 3.302497, 3.966084, 0.28049, 5.085871, 3.685917, 0.094395, 3.302497, 3.966084, -0.28049, 5.085871, 3.685917, 0.094395, 5.085871, 3.685917, -0.094395, 3.302497, 3.121528, 0.28049, 3.302497, 3.121528, -0.28049, 5.085871, 3.401694, -0.094395, 3.302497, 3.121528, 0.28049, 5.085871, 3.401694, -0.094395, 5.085871, 3.401694, 0.094395, 3.302497, 3.121528, -0.28049, 3.302497, 3.966084, -0.28049, 5.085871, 3.685917, -0.094395, 3.302497, 3.121528, -0.28049, 5.085871, 3.685917, -0.094395, 5.085871, 3.401694, -0.094395, -0.549299, -1.583461, -0.549299, 0.549299, -1.583461, -0.549299, 0.549299, -1.583461, 0.549299, -0.549299, -1.583461, -0.549299, 0.549299, -1.583461, 0.549299, -0.549299, -1.583461, 0.549299, 1, -1, 1, -1, -1, 1, -0.549299, -1.583461, 0.549299, 1, -1, 1, -0.549299, -1.583461, 0.549299, 0.549299, -1.583461, 0.549299, -1, -1, 1, -1, -1, -1, -0.549299, -1.583461, -0.549299, -1, -1, 1, -0.549299, -1.583461, -0.549299, -0.549299, -1.583461, 0.549299, 1, -1, -1, 1, -1, 1, 0.549299, -1.583461, 0.549299, 1, -1, -1, 0.549299, -1.583461, 0.549299, 0.549299, -1.583461, -0.549299 };
	vector<float> normals = { 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1 };
	vector<float> test_norms = { 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0.4861, 0.8739, 0, 0.4861, 0.8739, 0, 0.4861, 0.8739, 0, 0.4861, 0.8739, 0, 0.4861, 0.8739, 0, 0.4861, 0.8739, -0.8739, 0.4861, 0, -0.8739, 0.4861, 0, -0.8739, 0.4861, 0, -0.8739, 0.4861, 0, -0.8739, 0.4861, 0, -0.8739, 0.4861, 0, 0, -0.6113, -0.7914, 0, -0.6113, -0.7914, 0, -0.6113, -0.7914, 0, -0.6113, -0.7914, 0, -0.6113, -0.7914, 0, -0.6113, -0.7914, 0.8739, 0.4861, 0, 0.8739, 0.4861, 0, 0.8739, 0.4861, 0, 0.8739, 0.4861, 0, 0.8739, 0.4861, 0, 0.8739, 0.4861, 0, 0, 0.4861, -0.8739, 0, 0.4861, -0.8739, 0, 0.4861, -0.8739, 0, 0.4861, -0.8739, 0, 0.4861, -0.8739, 0, 0.4861, -0.8739, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, -0.3493, -0.937, 0, -0.3493, -0.937, 0, -0.3493, -0.937, 0, -0.3493, -0.937, 0, -0.3493, -0.937, 0, -0.3493, -0.937, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0.9341, 0, -0.3569, 0.9341, 0, -0.3569, 0.9341, 0, -0.3569, 0.9341, 0, -0.3569, 0.9341, 0, -0.3569, 0.9341, 0, -0.3569, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -0.7673, -0.6413, 0, -0.7673, -0.6413, 0, -0.7673, -0.6413, 0, -0.7673, -0.6413, 0, -0.7673, -0.6413, 0, -0.7673, -0.6413, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0.4323, -0.9017, 0, 0.4323, -0.9017, 0, 0.4323, -0.9017, 0, 0.4323, -0.9017, 0, 0.4323, -0.9017, 0, 0.4323, -0.9017, 0, -0.6413, 0.7673, 0, -0.6413, 0.7673, 0, -0.6413, 0.7673, 0, -0.6413, 0.7673, 0, -0.6413, 0.7673, 0, -0.6413, 0.7673, 0, -0.6413, -0.7673, 0, -0.6413, -0.7673, 0, -0.6413, -0.7673, 0, -0.6413, -0.7673, 0, -0.6413, -0.7673, 0, -0.6413, -0.7673, 0.7673, -0.6413, 0, 0.7673, -0.6413, 0, 0.7673, -0.6413, 0, 0.7673, -0.6413, 0, 0.7673, -0.6413, 0, 0.7673, -0.6413, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0.9017, 0.4323, 0, 0.9017, 0.4323, 0, 0.9017, 0.4323, 0, 0.9017, 0.4323, 0, 0.9017, 0.4323, 0, 0.9017, 0.4323, 0, -0.9017, 0.4323, 0, -0.9017, 0.4323, 0, -0.9017, 0.4323, 0, -0.9017, 0.4323, 0, -0.9017, 0.4323, 0, -0.9017, 0.4323, 0, 0, 0.4323, 0.9017, 0, 0.4323, 0.9017, 0, 0.4323, 0.9017, 0, 0.4323, 0.9017, 0, 0.4323, 0.9017, 0, 0.4323, 0.9017, 0, 0.9278, 0.3731, 0, 0.9278, 0.3731, 0, 0.9278, 0.3731, 0, 0.9278, 0.3731, 0, 0.9278, 0.3731, 0, 0.9278, 0.3731, 0, 0.8668, -0.4987, 0, 0.8668, -0.4987, 0, 0.8668, -0.4987, 0, 0.8668, -0.4987, 0, 0.8668, -0.4987, 0, 0.8668, -0.4987, 0, -0.8668, -0.4987, 0, -0.8668, -0.4987, 0, -0.8668, -0.4987, 0, -0.8668, -0.4987, 0, -0.8668, -0.4987, 0, -0.8668, -0.4987, -0.9341, 0, -0.3569, -0.9341, 0, -0.3569, -0.9341, 0, -0.3569, -0.9341, 0, -0.3569, -0.9341, 0, -0.3569, -0.9341, 0, -0.3569, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, -0.9278, 0.3731, 0, -0.9278, 0.3731, 0, -0.9278, 0.3731, 0, -0.9278, 0.3731, 0, -0.9278, 0.3731, 0, -0.9278, 0.3731, -0.9661, 0, 0.2581, -0.9661, 0, 0.2581, -0.9661, 0, 0.2581, -0.9661, 0, 0.2581, -0.9661, 0, 0.2581, -0.9661, 0, 0.2581, 0.9661, 0, 0.2581, 0.9661, 0, 0.2581, 0.9661, 0, 0.2581, 0.9661, 0, 0.2581, 0.9661, 0, 0.2581, 0.9661, 0, 0.2581, 0.1038, 0, 0.9946, 0.1038, 0, 0.9946, 0.1038, 0, 0.9946, 0.1038, 0, 0.9946, 0.1038, 0, 0.9946, 0.1038, 0, 0.9946, -0.2404, 0, -0.9707, -0.2404, 0, -0.9707, -0.2404, 0, -0.9707, -0.2404, 0, -0.9707, -0.2404, 0, -0.9707, -0.2404, 0, -0.9707, -0.2404, 0, 0.9707, -0.2404, 0, 0.9707, -0.2404, 0, 0.9707, -0.2404, 0, 0.9707, -0.2404, 0, 0.9707, -0.2404, 0, 0.9707, -0.3493, 0.937, 0, -0.3493, 0.937, 0, -0.3493, 0.937, 0, -0.3493, 0.937, 0, -0.3493, 0.937, 0, -0.3493, 0.937, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0.1552, 0.9879, 0, 0.1552, 0.9879, 0, 0.1552, 0.9879, 0, 0.1552, 0.9879, 0, 0.1552, 0.9879, 0, 0.1552, 0.9879, 0, 0.1552, -0.9879, 0, 0.1552, -0.9879, 0, 0.1552, -0.9879, 0, 0.1552, -0.9879, 0, 0.1552, -0.9879, 0, 0.1552, -0.9879, 0, 0.1038, 0, -0.9946, 0.1038, 0, -0.9946, 0.1038, 0, -0.9946, 0.1038, 0, -0.9946, 0.1038, 0, -0.9946, 0.1038, 0, -0.9946, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -0.6113, 0.7914, 0, -0.6113, 0.7914, 0, -0.6113, 0.7914, 0, -0.6113, 0.7914, 0, -0.6113, 0.7914, 0, -0.6113, 0.7914, -0.7914, -0.6113, 0, -0.7914, -0.6113, 0, -0.7914, -0.6113, 0, -0.7914, -0.6113, 0, -0.7914, -0.6113, 0, -0.7914, -0.6113, 0, 0.7914, -0.6113, 0, 0.7914, -0.6113, 0, 0.7914, -0.6113, 0, 0.7914, -0.6113, 0, 0.7914, -0.6113, 0, 0.7914, -0.6113, 0 };
	vector<float> uvCoords = {};
	vector<float> uv_test = {};

	time_t t = time(NULL);

	Mesh m(test_pos, test_norms, uvCoords);
	Mesh m2(positions, normals, uvCoords);
	Transform tf;
	Camera cams;
	tf.xScale = 1;
	tf.yScale = 1;
	tf.zScale = 1;
	tf.xPos = 6;
	tf.yPos = 0;
	tf.zPos = 0;

	Transform tf2;
	tf2.xScale = 1;
	tf2.yScale = 1;
	tf2.zScale = 1;
	tf2.xPos = 0;
	tf2.yPos = 0;
	tf2.zPos = 0;

	Transform tfloor;
	tfloor.xScale = 4;
	tfloor.yScale = 0.01f;
	tfloor.zScale = 4;
	tfloor.yPos = -2;

	cams.yPos = 0;
	cams.xPos = 0;
	cams.zPos = -5;
	int frames = 0;
	int tframe = 0;
	int dTtime = 0;
	int cfps = 0;

	fstream fileout;
	fileout.open("log.txt", std::fstream::in | std::fstream::out | std::fstream::app);

	renderer.setCanvas(windowX, windowY);
	char c = 0;
	bool camMode = true;
	bool clicked = false;

	bool onTick = false; // Allow game operation if this is active.
	while (true) {

		if (onTick) {
			// Game logic pipeline
			tf.zRot += radians(1);

			if (GetKeyState('A') & 0x8000/*Check if high-order bit is set (1 << 15)*/)
			{
				cams.xPos += 0.1f;
				fileout << cams.xPos << "  " << cams.yPos << "  " << cams.zPos << "\n";
				fileout << cams.xRot << "  " << cams.yRot << "  " << cams.zRot << '\n';
			}

			if (GetKeyState('D') & 0x8000/*Check if high-order bit is set (1 << 15)*/)
			{
				cams.xPos -= 0.1f;
				fileout << cams.xPos << "  " << cams.yPos << "  " << cams.zPos << "\n";
				fileout << cams.xRot << "  " << cams.yRot << "  " << cams.zRot << '\n';
			}

			if (GetKeyState('W') & 0x8000/*Check if high-order bit is set (1 << 15)*/)
			{
				cams.zPos += 0.1f;
				fileout << cams.xPos << "  " << cams.yPos << "  " << cams.zPos << "\n";
				fileout << cams.xRot << "  " << cams.yRot << "  " << cams.zRot << '\n';
			}

			if (GetKeyState('S') & 0x8000/*Check if high-order bit is set (1 << 15)*/)
			{
				cams.zPos -= 0.1f;
				fileout << cams.xPos << "  " << cams.yPos << "  " << cams.zPos << "\n";
				fileout << cams.xRot << "  " << cams.yRot << "  " << cams.zRot << '\n';
			}

			if (GetKeyState('Q') & 0x8000/*Check if high-order bit is set (1 << 15)*/)
			{
				cams.yPos += 0.1f;
				fileout << cams.xPos << "  " << cams.yPos << "  " << cams.zPos << "\n";
				fileout << cams.xRot << "  " << cams.yRot << "  " << cams.zRot << '\n';
			}

			if (GetKeyState('Z') & 0x8000/*Check if high-order bit is set (1 << 15)*/)
			{
				cams.yPos -= 0.1f;
				fileout << cams.xPos << "  " << cams.yPos << "  " << cams.zPos << "\n";
				fileout << cams.xRot << "  " << cams.yRot << "  " << cams.zRot << '\n';
			}

			if (GetKeyState('J') & 0x8000/*Check if high-order bit is set (1 << 15)*/)
			{
				cams.xRot += radians(1);
				fileout << cams.xPos << "  " << cams.yPos << "  " << cams.zPos << "\n";
				fileout << cams.xRot << "  " << cams.yRot << "  " << cams.zRot << '\n';
			}

			if (GetKeyState('L') & 0x8000/*Check if high-order bit is set (1 << 15)*/)
			{
				cams.xRot -= radians(1);
				fileout << cams.xPos << "  " << cams.yPos << "  " << cams.zPos << "\n";
				fileout << cams.xRot << "  " << cams.yRot << "  " << cams.zRot << '\n';
			}

			if (GetKeyState('I') & 0x8000/*Check if high-order bit is set (1 << 15)*/)
			{
				cams.yRot -= radians(1);
				fileout << cams.xPos << "  " << cams.yPos << "  " << cams.zPos << "\n";
				fileout << cams.xRot << "  " << cams.yRot << "  " << cams.zRot << '\n';
			}

			if (GetKeyState('K') & 0x8000/*Check if high-order bit is set (1 << 15)*/)
			{
				cams.yRot += radians(1);
				fileout << cams.xPos << "  " << cams.yPos << "  " << cams.zPos << "\n";
				fileout << cams.xRot << "  " << cams.yRot << "  " << cams.zRot << '\n';
			}

			if (GetKeyState('T') & 0x8000/*Check if high-order bit is set (1 << 15)*/)
			{
				camMode = true;
			}
			if (GetKeyState('Y') & 0x8000/*Check if high-order bit is set (1 << 15)*/)
			{
				camMode = false;
			}

			if (GetKeyState('O') & 0x8000/*Check if high-order bit is set (1 << 15)*/)
			{
				if (!clicked && nPlane < 10000)
					nPlane *= 10;
				fileout << nPlane << "<NP FP>" << fPlane << '\n';
				clicked = true;
			}
			else {
				clicked = false;
			}

			if (GetKeyState('P') & 0x8000/*Check if high-order bit is set (1 << 15)*/)
			{
				if (!clicked)
					nPlane /= 10;
				fileout << nPlane << "<NP FP>" << fPlane << '\n';
				clicked = true;
			}
			else {
				clicked = false;
			}

			onTick = false;
		}


		// Rendering Pipeline

		bitmap_image img("dvd.bmp");
		float tst[] = { 0,0 };
		Texture_Setup(&img, tst);


		if (camMode) {
			ProjectMesh(windowX, windowY, nPlane, fPlane, PROJECT_PERSPECTIVE, m, tf, cams, tris, FragShader_BS);
			ProjectMesh(windowX, windowY, nPlane, fPlane, PROJECT_PERSPECTIVE, m2, tf2, cams, tris, FragShader_BS, tst);
			ProjectMesh(windowX, windowY, nPlane, fPlane, PROJECT_PERSPECTIVE, m2, Transform(0, 0, -1, T_POSITION), cams, tris, FragShader_BS, tst);
			ProjectMesh(windowX, windowY, nPlane, fPlane, PROJECT_PERSPECTIVE, m2, Transform(10, 0, 0, T_POSITION), cams, tris, FragShader_BS, tst);
			ProjectMesh(windowX, windowY, nPlane, fPlane, PROJECT_PERSPECTIVE, m2, tfloor, cams, tris, FragShader_Text, tst);
		}
		else {
			Camera c = Transform(0, 7, 0, 0, radians(90), 0);
			Transform t = Transform(cams.xPos, cams.yPos, cams.zPos, cams.xRot, cams.yRot, cams.zRot, 0.25f, 0.25f, 0.25f);
			Transform nc = Transform(cams.xPos, cams.yPos, cams.zPos + nPlane, cams.xRot, cams.yRot, cams.zRot, 3, 0.085f, 0.085f);
			Transform fc = Transform(cams.xPos, cams.yPos, cams.zPos + fPlane, cams.xRot, cams.yRot, cams.zRot, 3, 0.085f, 0.085f);

			ProjectMesh(windowX, windowY, nPlane, fPlane, PROJECT_ORTHO, m2, t, c, tris, FragShader_BS);
			ProjectMesh(windowX, windowY, nPlane, fPlane, PROJECT_ORTHO, m2, nc, c, tris, FragShader_Red);
			ProjectMesh(windowX, windowY, nPlane, fPlane, PROJECT_ORTHO, m2, fc, c, tris, FragShader_BS);

			ProjectMesh(windowX, windowY, nPlane, fPlane, PROJECT_ORTHO, m, tf, c, tris, FragShader_BS);
			ProjectMesh(windowX, windowY, nPlane, fPlane, PROJECT_ORTHO, m2, tf2, c, tris, FragShader_BS, tst);
			ProjectMesh(windowX, windowY, nPlane, fPlane, PROJECT_ORTHO, m2, Transform(0, 0, -1, T_POSITION), c, tris, FragShader_BS, tst);
			ProjectMesh(windowX, windowY, nPlane, fPlane, PROJECT_ORTHO, m2, Transform(10, 0, 0, T_POSITION), c, tris, FragShader_BS, tst);
			ProjectMesh(windowX, windowY, nPlane, fPlane, PROJECT_ORTHO, m2, tfloor, c, tris, FragShader_Text, tst);
		}
		Rasterizer(renderer, windowX, windowY, tris); // Apply interlacing to improve rendering speed (2-3x)

		string s = " " + std::to_string(cfps) + " FPS" + " Frames rendered: " + std::to_string(frames++) + " Tick rate: " + std::to_string(cfps * (0.05f));
		tframe++;
		wstring r = std::wstring(s.begin(), s.end());
		LPCWSTR wideString = r.c_str();
		SetConsoleTitle(wideString);

		dTtime++;

		time_t c = time(NULL) - t;
		if (c >= 1) {
			t = time(NULL);
			cfps = tframe;
			tframe = 0;
		}

		if (dTtime > cfps * 0.05f) {
			onTick = true;
			dTtime = false;
		}
	}
	fileout.close();
}
*/
void Rasterize_MT() {
	//SetConsoleTitle(LPCWSTR(string("Using software D3D renderer")));

	//while(GameLoop());
	//Demo_2D();
	int windowX = 854; int windowY = 480;

	vector<float> positions = { 1, 1, -1, -1, 1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, -1, 1, 1, 1, -1, 1, -1, 1, 1, -1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, 1, -1, 1, -1, -1, -1, 1, -1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, -1, -1, 1, 1, 1, 1, -1, 1, -1, -1, -1, -1, 1, -1, 1, 1, -1, -1, -1, -1, 1, 1, -1, 1, -1, -1 }; //[-1, -1, 1, 1, -1, 1, -1, 1, 1, 1, 1, 1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 1, 1, -1, 1, -1, -1, -1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, 1, -1, -1, 1, 1, -1, -1, -1, 1, -1, -1, -1, -1, 1, 1, -1, 1, -1, 1, 1, 1, 1, 1, -1, 1, -1, 1, 1, -1]//[-1,-1,-1, -1,-1, 1, -1, 1, 1,   1, 1,-1, -1,-1,-1, -1, 1,-1,   1,-1, 1, -1,-1,-1, 1,-1,-1,   1, 1,-1, 1,-1,-1, -1,-1,-1, -1,-1,-1, -1, 1, 1, -1, 1,-1, 1,-1, 1, -1,-1, 1, -1,-1,-1, -1, 1, 1, -1,-1, 1, 1,-1, 1, 1, 1, 1, 1,-1,-1, 1, 1,-1, 1,-1,-1, 1, 1, 1, 1,-1, 1, 1, 1, 1, 1, 1,-1, -1, 1,-1, 1, 1, 1, -1, 1,-1, -1, 1, 1, 1, 1, 1, -1, 1, 1, 1,-1, 1};
	vector<float> test_pos = { 0.338895, 0.188425, 0.338895, 0.338895, 0.188425, -0.338895, 0.338895, 2.777286, -0.338895, 0.338895, 0.188425, 0.338895, 0.338895, 2.777286, -0.338895, 0.338895, 2.777286, 0.338895, 1, -1, 1, 0.338895, 0.188425, 0.338895, -0.338895, 0.188425, 0.338895, 1, -1, 1, -0.338895, 0.188425, 0.338895, -1, -1, 1, -1, -1, 1, -0.338895, 0.188425, 0.338895, -0.338895, 0.188425, -0.338895, -1, -1, 1, -0.338895, 0.188425, -0.338895, -1, -1, -1, -1, -1, -1, 1, -1, -1, 0.549299, -1.583461, -0.549299, -1, -1, -1, 0.549299, -1.583461, -0.549299, -0.549299, -1.583461, -0.549299, 1, -1, -1, 0.338895, 0.188425, -0.338895, 0.338895, 0.188425, 0.338895, 1, -1, -1, 0.338895, 0.188425, 0.338895, 1, -1, 1, -1, -1, -1, -0.338895, 0.188425, -0.338895, 0.338895, 0.188425, -0.338895, -1, -1, -1, 0.338895, 0.188425, -0.338895, 1, -1, -1, -0.338895, 2.777286, -0.338895, -0.338895, 2.777286, 0.338895, -0.169716, 2.777286, 0.169716, -0.338895, 2.777286, -0.338895, -0.169716, 2.777286, 0.169716, -0.169716, 2.777286, -0.169716, 0.338895, 0.188425, -0.338895, -0.338895, 0.188425, -0.338895, -0.338895, 2.777286, -0.338895, 0.338895, 0.188425, -0.338895, -0.338895, 2.777286, -0.338895, 0.338895, 2.777286, -0.338895, -0.338895, 0.188425, 0.338895, 0.338895, 0.188425, 0.338895, 0.338895, 2.777286, 0.338895, -0.338895, 0.188425, 0.338895, 0.338895, 2.777286, 0.338895, -0.338895, 2.777286, 0.338895, -0.338895, 0.188425, -0.338895, -0.338895, 0.188425, 0.338895, -0.338895, 2.777286, 0.338895, -0.338895, 0.188425, -0.338895, -0.338895, 2.777286, 0.338895, -0.338895, 2.777286, -0.338895, 0.169716, 3.288299, -0.169716, -0.169716, 3.288299, -0.169716, -0.169716, 3.799312, -0.169716, 0.169716, 3.288299, -0.169716, -0.169716, 3.799312, -0.169716, 0.169716, 3.799312, -0.169716, -0.338895, 2.777286, 0.338895, 0.338895, 2.777286, 0.338895, 0.169716, 2.777286, 0.169716, -0.338895, 2.777286, 0.338895, 0.169716, 2.777286, 0.169716, -0.169716, 2.777286, 0.169716, 0.338895, 2.777286, -0.338895, -0.338895, 2.777286, -0.338895, -0.169716, 2.777286, -0.169716, 0.338895, 2.777286, -0.338895, -0.169716, 2.777286, -0.169716, 0.169716, 2.777286, -0.169716, 0.338895, 2.777286, 0.338895, 0.338895, 2.777286, -0.338895, 0.169716, 2.777286, -0.169716, 0.338895, 2.777286, 0.338895, 0.169716, 2.777286, -0.169716, 0.169716, 2.777286, 0.169716, 0.169716, 3.799312, 0.169716, 0.169716, 3.799312, -0.169716, 0.169716, 6.133103, -0.169716, 0.169716, 3.799312, 0.169716, 0.169716, 6.133103, -0.169716, 0.169716, 6.133103, 0.169716, 0.169716, 3.799312, -0.169716, 0.169716, 3.799312, 0.169716, 2.855141, 3.799312, 0.169716, 0.169716, 3.799312, -0.169716, 2.855141, 3.799312, 0.169716, 2.855141, 3.799312, -0.169716, -0.169716, 3.288299, -0.169716, -0.169716, 3.288299, 0.169716, -0.169716, 3.799312, 0.169716, -0.169716, 3.288299, -0.169716, -0.169716, 3.799312, 0.169716, -0.169716, 3.799312, -0.169716, -0.169716, 3.288299, 0.169716, 0.169716, 3.288299, 0.169716, 0.169716, 3.288299, 3.672321, -0.169716, 3.288299, 0.169716, 0.169716, 3.288299, 3.672321, -0.169716, 3.288299, 3.672321, -0.169716, 2.777286, 0.169716, 0.169716, 2.777286, 0.169716, 0.169716, 3.288299, 0.169716, -0.169716, 2.777286, 0.169716, 0.169716, 3.288299, 0.169716, -0.169716, 3.288299, 0.169716, -0.169716, 2.777286, -0.169716, -0.169716, 2.777286, 0.169716, -0.169716, 3.288299, 0.169716, -0.169716, 2.777286, -0.169716, -0.169716, 3.288299, 0.169716, -0.169716, 3.288299, -0.169716, 0.169716, 2.777286, 0.169716, 0.169716, 2.777286, -0.169716, 0.169716, 3.288299, -0.169716, 0.169716, 2.777286, 0.169716, 0.169716, 3.288299, -0.169716, 0.169716, 3.288299, 0.169716, 0.169716, 2.777286, -0.169716, -0.169716, 2.777286, -0.169716, -0.169716, 3.288299, -0.169716, 0.169716, 2.777286, -0.169716, -0.169716, 3.288299, -0.169716, 0.169716, 3.288299, -0.169716, 2.855141, 3.288299, 0.169716, 2.855141, 3.288299, -0.169716, 3.302497, 3.121528, -0.28049, 2.855141, 3.288299, 0.169716, 3.302497, 3.121528, -0.28049, 3.302497, 3.121528, 0.28049, 0.169716, 3.799312, 0.169716, 0.169716, 3.288299, 0.169716, 2.855141, 3.288299, 0.169716, 0.169716, 3.799312, 0.169716, 2.855141, 3.288299, 0.169716, 2.855141, 3.799312, 0.169716, 0.169716, 3.288299, -0.169716, 0.169716, 3.799312, -0.169716, 2.855141, 3.799312, -0.169716, 0.169716, 3.288299, -0.169716, 2.855141, 3.799312, -0.169716, 2.855141, 3.288299, -0.169716, 0.169716, 3.288299, 0.169716, 0.169716, 3.288299, -0.169716, 2.855141, 3.288299, -0.169716, 0.169716, 3.288299, 0.169716, 2.855141, 3.288299, -0.169716, 2.855141, 3.288299, 0.169716, 0.169716, 3.288299, 3.672321, 0.169716, 3.799312, 3.672321, 0.246526, 3.914951, 3.873332, 0.169716, 3.288299, 3.672321, 0.246526, 3.914951, 3.873332, 0.246526, 3.17266, 3.873332, 0.169716, 3.288299, 0.169716, 0.169716, 3.799312, 0.169716, 0.169716, 3.799312, 3.672321, 0.169716, 3.288299, 0.169716, 0.169716, 3.799312, 3.672321, 0.169716, 3.288299, 3.672321, 0.169716, 3.799312, 0.169716, -0.169716, 3.799312, 0.169716, -0.169716, 3.799312, 3.672321, 0.169716, 3.799312, 0.169716, -0.169716, 3.799312, 3.672321, 0.169716, 3.799312, 3.672321, -0.169716, 3.799312, 0.169716, -0.169716, 3.288299, 0.169716, -0.169716, 3.288299, 3.672321, -0.169716, 3.799312, 0.169716, -0.169716, 3.288299, 3.672321, -0.169716, 3.799312, 3.672321, -0.169716, 6.133103, -0.169716, -0.169716, 6.133103, 0.169716, -0.37321, 6.376593, 0.37321, -0.169716, 6.133103, -0.169716, -0.37321, 6.376593, 0.37321, -0.37321, 6.376593, -0.37321, -0.169716, 3.799312, -0.169716, -0.169716, 3.799312, 0.169716, -0.169716, 6.133103, 0.169716, -0.169716, 3.799312, -0.169716, -0.169716, 6.133103, 0.169716, -0.169716, 6.133103, -0.169716, -0.169716, 3.799312, 0.169716, 0.169716, 3.799312, 0.169716, 0.169716, 6.133103, 0.169716, -0.169716, 3.799312, 0.169716, 0.169716, 6.133103, 0.169716, -0.169716, 6.133103, 0.169716, 0.169716, 3.799312, -0.169716, -0.169716, 3.799312, -0.169716, -0.169716, 6.133103, -0.169716, 0.169716, 3.799312, -0.169716, -0.169716, 6.133103, -0.169716, 0.169716, 6.133103, -0.169716, 0.37321, 6.376593, -0.37321, -0.37321, 6.376593, -0.37321, -0.103801, 6.938471, -0.103801, 0.37321, 6.376593, -0.37321, -0.103801, 6.938471, -0.103801, 0.103801, 6.938471, -0.103801, -0.169716, 6.133103, 0.169716, 0.169716, 6.133103, 0.169716, 0.37321, 6.376593, 0.37321, -0.169716, 6.133103, 0.169716, 0.37321, 6.376593, 0.37321, -0.37321, 6.376593, 0.37321, 0.169716, 6.133103, -0.169716, -0.169716, 6.133103, -0.169716, -0.37321, 6.376593, -0.37321, 0.169716, 6.133103, -0.169716, -0.37321, 6.376593, -0.37321, 0.37321, 6.376593, -0.37321, 0.169716, 6.133103, 0.169716, 0.169716, 6.133103, -0.169716, 0.37321, 6.376593, -0.37321, 0.169716, 6.133103, 0.169716, 0.37321, 6.376593, -0.37321, 0.37321, 6.376593, 0.37321, 0.103801, 6.938471, -0.103801, -0.103801, 6.938471, -0.103801, -0.103801, 6.938471, 0.103801, 0.103801, 6.938471, -0.103801, -0.103801, 6.938471, 0.103801, 0.103801, 6.938471, 0.103801, 0.37321, 6.376593, 0.37321, 0.37321, 6.376593, -0.37321, 0.103801, 6.938471, -0.103801, 0.37321, 6.376593, 0.37321, 0.103801, 6.938471, -0.103801, 0.103801, 6.938471, 0.103801, -0.37321, 6.376593, -0.37321, -0.37321, 6.376593, 0.37321, -0.103801, 6.938471, 0.103801, -0.37321, 6.376593, -0.37321, -0.103801, 6.938471, 0.103801, -0.103801, 6.938471, -0.103801, -0.37321, 6.376593, 0.37321, 0.37321, 6.376593, 0.37321, 0.103801, 6.938471, 0.103801, -0.37321, 6.376593, 0.37321, 0.103801, 6.938471, 0.103801, -0.103801, 6.938471, 0.103801, 0.246526, 3.914951, 3.873332, -0.246526, 3.914951, 3.873332, -0.042408, 3.607651, 4.63741, 0.246526, 3.914951, 3.873332, -0.042408, 3.607651, 4.63741, 0.042408, 3.607651, 4.63741, 0.169716, 3.799312, 3.672321, -0.169716, 3.799312, 3.672321, -0.246526, 3.914951, 3.873332, 0.169716, 3.799312, 3.672321, -0.246526, 3.914951, 3.873332, 0.246526, 3.914951, 3.873332, -0.169716, 3.288299, 3.672321, 0.169716, 3.288299, 3.672321, 0.246526, 3.17266, 3.873332, -0.169716, 3.288299, 3.672321, 0.246526, 3.17266, 3.873332, -0.246526, 3.17266, 3.873332, -0.169716, 3.799312, 3.672321, -0.169716, 3.288299, 3.672321, -0.246526, 3.17266, 3.873332, -0.169716, 3.799312, 3.672321, -0.246526, 3.17266, 3.873332, -0.246526, 3.914951, 3.873332, -0.042408, 3.47996, 4.63741, 0.042408, 3.47996, 4.63741, 0.042408, 3.607651, 4.63741, -0.042408, 3.47996, 4.63741, 0.042408, 3.607651, 4.63741, -0.042408, 3.607651, 4.63741, -0.246526, 3.17266, 3.873332, 0.246526, 3.17266, 3.873332, 0.042408, 3.47996, 4.63741, -0.246526, 3.17266, 3.873332, 0.042408, 3.47996, 4.63741, -0.042408, 3.47996, 4.63741, -0.246526, 3.914951, 3.873332, -0.246526, 3.17266, 3.873332, -0.042408, 3.47996, 4.63741, -0.246526, 3.914951, 3.873332, -0.042408, 3.47996, 4.63741, -0.042408, 3.607651, 4.63741, 0.246526, 3.17266, 3.873332, 0.246526, 3.914951, 3.873332, 0.042408, 3.607651, 4.63741, 0.246526, 3.17266, 3.873332, 0.042408, 3.607651, 4.63741, 0.042408, 3.47996, 4.63741, 3.302497, 3.966084, 0.28049, 3.302497, 3.121528, 0.28049, 5.085871, 3.401694, 0.094395, 3.302497, 3.966084, 0.28049, 5.085871, 3.401694, 0.094395, 5.085871, 3.685917, 0.094395, 2.855141, 3.288299, -0.169716, 2.855141, 3.799312, -0.169716, 3.302497, 3.966084, -0.28049, 2.855141, 3.288299, -0.169716, 3.302497, 3.966084, -0.28049, 3.302497, 3.121528, -0.28049, 2.855141, 3.799312, 0.169716, 2.855141, 3.288299, 0.169716, 3.302497, 3.121528, 0.28049, 2.855141, 3.799312, 0.169716, 3.302497, 3.121528, 0.28049, 3.302497, 3.966084, 0.28049, 2.855141, 3.799312, -0.169716, 2.855141, 3.799312, 0.169716, 3.302497, 3.966084, 0.28049, 2.855141, 3.799312, -0.169716, 3.302497, 3.966084, 0.28049, 3.302497, 3.966084, -0.28049, 5.085871, 3.401694, 0.094395, 5.085871, 3.401694, -0.094395, 5.085871, 3.685917, -0.094395, 5.085871, 3.401694, 0.094395, 5.085871, 3.685917, -0.094395, 5.085871, 3.685917, 0.094395, 3.302497, 3.966084, -0.28049, 3.302497, 3.966084, 0.28049, 5.085871, 3.685917, 0.094395, 3.302497, 3.966084, -0.28049, 5.085871, 3.685917, 0.094395, 5.085871, 3.685917, -0.094395, 3.302497, 3.121528, 0.28049, 3.302497, 3.121528, -0.28049, 5.085871, 3.401694, -0.094395, 3.302497, 3.121528, 0.28049, 5.085871, 3.401694, -0.094395, 5.085871, 3.401694, 0.094395, 3.302497, 3.121528, -0.28049, 3.302497, 3.966084, -0.28049, 5.085871, 3.685917, -0.094395, 3.302497, 3.121528, -0.28049, 5.085871, 3.685917, -0.094395, 5.085871, 3.401694, -0.094395, -0.549299, -1.583461, -0.549299, 0.549299, -1.583461, -0.549299, 0.549299, -1.583461, 0.549299, -0.549299, -1.583461, -0.549299, 0.549299, -1.583461, 0.549299, -0.549299, -1.583461, 0.549299, 1, -1, 1, -1, -1, 1, -0.549299, -1.583461, 0.549299, 1, -1, 1, -0.549299, -1.583461, 0.549299, 0.549299, -1.583461, 0.549299, -1, -1, 1, -1, -1, -1, -0.549299, -1.583461, -0.549299, -1, -1, 1, -0.549299, -1.583461, -0.549299, -0.549299, -1.583461, 0.549299, 1, -1, -1, 1, -1, 1, 0.549299, -1.583461, 0.549299, 1, -1, -1, 0.549299, -1.583461, 0.549299, 0.549299, -1.583461, -0.549299 };
	vector<float> normals = { 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1 };
	vector<float> test_norms = { 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0.4861, 0.8739, 0, 0.4861, 0.8739, 0, 0.4861, 0.8739, 0, 0.4861, 0.8739, 0, 0.4861, 0.8739, 0, 0.4861, 0.8739, -0.8739, 0.4861, 0, -0.8739, 0.4861, 0, -0.8739, 0.4861, 0, -0.8739, 0.4861, 0, -0.8739, 0.4861, 0, -0.8739, 0.4861, 0, 0, -0.6113, -0.7914, 0, -0.6113, -0.7914, 0, -0.6113, -0.7914, 0, -0.6113, -0.7914, 0, -0.6113, -0.7914, 0, -0.6113, -0.7914, 0.8739, 0.4861, 0, 0.8739, 0.4861, 0, 0.8739, 0.4861, 0, 0.8739, 0.4861, 0, 0.8739, 0.4861, 0, 0.8739, 0.4861, 0, 0, 0.4861, -0.8739, 0, 0.4861, -0.8739, 0, 0.4861, -0.8739, 0, 0.4861, -0.8739, 0, 0.4861, -0.8739, 0, 0.4861, -0.8739, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, -0.3493, -0.937, 0, -0.3493, -0.937, 0, -0.3493, -0.937, 0, -0.3493, -0.937, 0, -0.3493, -0.937, 0, -0.3493, -0.937, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0.9341, 0, -0.3569, 0.9341, 0, -0.3569, 0.9341, 0, -0.3569, 0.9341, 0, -0.3569, 0.9341, 0, -0.3569, 0.9341, 0, -0.3569, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -0.7673, -0.6413, 0, -0.7673, -0.6413, 0, -0.7673, -0.6413, 0, -0.7673, -0.6413, 0, -0.7673, -0.6413, 0, -0.7673, -0.6413, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0.4323, -0.9017, 0, 0.4323, -0.9017, 0, 0.4323, -0.9017, 0, 0.4323, -0.9017, 0, 0.4323, -0.9017, 0, 0.4323, -0.9017, 0, -0.6413, 0.7673, 0, -0.6413, 0.7673, 0, -0.6413, 0.7673, 0, -0.6413, 0.7673, 0, -0.6413, 0.7673, 0, -0.6413, 0.7673, 0, -0.6413, -0.7673, 0, -0.6413, -0.7673, 0, -0.6413, -0.7673, 0, -0.6413, -0.7673, 0, -0.6413, -0.7673, 0, -0.6413, -0.7673, 0.7673, -0.6413, 0, 0.7673, -0.6413, 0, 0.7673, -0.6413, 0, 0.7673, -0.6413, 0, 0.7673, -0.6413, 0, 0.7673, -0.6413, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0.9017, 0.4323, 0, 0.9017, 0.4323, 0, 0.9017, 0.4323, 0, 0.9017, 0.4323, 0, 0.9017, 0.4323, 0, 0.9017, 0.4323, 0, -0.9017, 0.4323, 0, -0.9017, 0.4323, 0, -0.9017, 0.4323, 0, -0.9017, 0.4323, 0, -0.9017, 0.4323, 0, -0.9017, 0.4323, 0, 0, 0.4323, 0.9017, 0, 0.4323, 0.9017, 0, 0.4323, 0.9017, 0, 0.4323, 0.9017, 0, 0.4323, 0.9017, 0, 0.4323, 0.9017, 0, 0.9278, 0.3731, 0, 0.9278, 0.3731, 0, 0.9278, 0.3731, 0, 0.9278, 0.3731, 0, 0.9278, 0.3731, 0, 0.9278, 0.3731, 0, 0.8668, -0.4987, 0, 0.8668, -0.4987, 0, 0.8668, -0.4987, 0, 0.8668, -0.4987, 0, 0.8668, -0.4987, 0, 0.8668, -0.4987, 0, -0.8668, -0.4987, 0, -0.8668, -0.4987, 0, -0.8668, -0.4987, 0, -0.8668, -0.4987, 0, -0.8668, -0.4987, 0, -0.8668, -0.4987, -0.9341, 0, -0.3569, -0.9341, 0, -0.3569, -0.9341, 0, -0.3569, -0.9341, 0, -0.3569, -0.9341, 0, -0.3569, -0.9341, 0, -0.3569, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, -0.9278, 0.3731, 0, -0.9278, 0.3731, 0, -0.9278, 0.3731, 0, -0.9278, 0.3731, 0, -0.9278, 0.3731, 0, -0.9278, 0.3731, -0.9661, 0, 0.2581, -0.9661, 0, 0.2581, -0.9661, 0, 0.2581, -0.9661, 0, 0.2581, -0.9661, 0, 0.2581, -0.9661, 0, 0.2581, 0.9661, 0, 0.2581, 0.9661, 0, 0.2581, 0.9661, 0, 0.2581, 0.9661, 0, 0.2581, 0.9661, 0, 0.2581, 0.9661, 0, 0.2581, 0.1038, 0, 0.9946, 0.1038, 0, 0.9946, 0.1038, 0, 0.9946, 0.1038, 0, 0.9946, 0.1038, 0, 0.9946, 0.1038, 0, 0.9946, -0.2404, 0, -0.9707, -0.2404, 0, -0.9707, -0.2404, 0, -0.9707, -0.2404, 0, -0.9707, -0.2404, 0, -0.9707, -0.2404, 0, -0.9707, -0.2404, 0, 0.9707, -0.2404, 0, 0.9707, -0.2404, 0, 0.9707, -0.2404, 0, 0.9707, -0.2404, 0, 0.9707, -0.2404, 0, 0.9707, -0.3493, 0.937, 0, -0.3493, 0.937, 0, -0.3493, 0.937, 0, -0.3493, 0.937, 0, -0.3493, 0.937, 0, -0.3493, 0.937, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0.1552, 0.9879, 0, 0.1552, 0.9879, 0, 0.1552, 0.9879, 0, 0.1552, 0.9879, 0, 0.1552, 0.9879, 0, 0.1552, 0.9879, 0, 0.1552, -0.9879, 0, 0.1552, -0.9879, 0, 0.1552, -0.9879, 0, 0.1552, -0.9879, 0, 0.1552, -0.9879, 0, 0.1552, -0.9879, 0, 0.1038, 0, -0.9946, 0.1038, 0, -0.9946, 0.1038, 0, -0.9946, 0.1038, 0, -0.9946, 0.1038, 0, -0.9946, 0.1038, 0, -0.9946, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -0.6113, 0.7914, 0, -0.6113, 0.7914, 0, -0.6113, 0.7914, 0, -0.6113, 0.7914, 0, -0.6113, 0.7914, 0, -0.6113, 0.7914, -0.7914, -0.6113, 0, -0.7914, -0.6113, 0, -0.7914, -0.6113, 0, -0.7914, -0.6113, 0, -0.7914, -0.6113, 0, -0.7914, -0.6113, 0, 0.7914, -0.6113, 0, 0.7914, -0.6113, 0, 0.7914, -0.6113, 0, 0.7914, -0.6113, 0, 0.7914, -0.6113, 0, 0.7914, -0.6113, 0 };
	vector<float> uvCoords = {};
	vector<float> uv_test = {};

	time_t t = time(NULL);

	Mesh m(test_pos, test_norms, uvCoords);
	Mesh m2(positions, normals, uvCoords);
	Transform tf;
	Camera cams;
	tf.xScale = 50;
	tf.yScale = 50;
	tf.zScale = 50;
	tf.xPos = 300;
	tf.yPos = 300;
	tf.zPos = 0;

	Transform tf2;
	tf2.xScale = 30;
	tf2.yScale = 30;
	tf2.zScale = 30;
	tf2.xPos = 100;
	tf2.yPos = 300;
	tf2.zPos = 0;

	int frames = 0;
	int tframe = 0;
	int cfps = 0;
	Renderer3D render;
	priority_queue<Triangle, vector<Triangle>, std::greater<Triangle>> tris;

	render.StartMTRenderer();
	while (true) {
		tf.yRot -= 1;
		tf.xRot -= 1;
		tf2.zRot++;
		tf2.xRot++;
		bitmap_image img("dvd.bmp");
		float tst[] = { 0,0 };
		Texture_Setup(&img, tst);

		//ProjectMesh(windowX, windowY, m, tf, cams, tris, FragShader_BS);
		//ProjectMesh(windowX, windowY, m2, tf2, cams, tris, FragShader_Text, tst);
		Rasterizer_MT(render, tris);

		render.displayImage(854, 480);
		render.deleteImage();

		string s = " " + std::to_string(cfps) + " FPS" + " Frames rendered: " + std::to_string(frames++);
		tframe++;

		wstring r = std::wstring(s.begin(), s.end());
		LPCWSTR wideString = r.c_str();
		SetConsoleTitle(wideString);

		time_t c = time(NULL) - t;
		if (c >= 1) {
			t = time(NULL);
			cfps = tframe;
			tframe = 0;
		}


	}

	render.StopMTRenderer();
}
*/